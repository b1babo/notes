{"pageProps":{"note":{"id":"hwo9g7p4ti771dbzgew52wr","title":"Fmt_string","desc":"","updated":1672143923737,"created":1670856082019,"custom":{},"fname":"computer.security.ctf.pwn.fmt_string","type":"note","vault":{"fsPath":".","selfContained":true,"name":"dendron-note"},"contentHash":"762bf80ad726da7d708fb7d99689356a","links":[],"anchors":{"格式化字符串漏洞":{"type":"header","text":"格式化字符串漏洞","value":"格式化字符串漏洞","line":8,"column":0,"depth":1},"格式化输出函数和格式字符串用法":{"type":"header","text":"格式化输出函数和格式字符串用法","value":"格式化输出函数和格式字符串用法","line":9,"column":0,"depth":2},"格式化占位符":{"type":"header","text":"格式化占位符","value":"格式化占位符","line":11,"column":0,"depth":3},"格式字符串用法":{"type":"header","text":"格式字符串用法","value":"格式字符串用法","line":36,"column":0,"depth":3},"调用printf时栈结构":{"type":"header","text":"调用printf时栈结构","value":"调用printf时栈结构","line":55,"column":0,"depth":4},"漏洞原理":{"type":"header","text":"漏洞原理","value":"漏洞原理","line":89,"column":0,"depth":3},"如何利用":{"type":"header","text":"如何利用","value":"如何利用","line":103,"column":0,"depth":3},"读原语":{"type":"header","text":"读原语","value":"读原语","line":104,"column":0,"depth":4},"写原语":{"type":"header","text":"写原语","value":"写原语","line":125,"column":0,"depth":4},"64位利用":{"type":"header","text":"64位利用","value":"64位利用","line":145,"column":0,"depth":4},"如何挖掘漏洞":{"type":"header","text":"如何挖掘漏洞","value":"如何挖掘漏洞","line":153,"column":0,"depth":3},"代码审计":{"type":"header","text":"代码审计","value":"代码审计","line":154,"column":0,"depth":4},"fuzz":{"type":"header","text":"fuzz","value":"fuzz","line":156,"column":0,"depth":4},"参考":{"type":"header","text":"参考","value":"参考","line":166,"column":0,"depth":2}},"children":[],"parent":"w5ka1vxiqngvx0e40s56y8t","data":{}},"body":"<h1 id=\"fmt_string\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fmt_string\"></a>Fmt_string</h1>\n<h1 id=\"格式化字符串漏洞\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#格式化字符串漏洞\"></a>格式化字符串漏洞</h1>\n<h2 id=\"格式化输出函数和格式字符串用法\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#格式化输出函数和格式字符串用法\"></a>格式化输出函数和格式字符串用法</h2>\n<h3 id=\"格式化占位符\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#格式化占位符\"></a>格式化占位符</h3>\n<p><code>%[parameter][flags][field width][.precision][length]type</code></p>\n<ul>\n<li>parameter: n$,表示对应第几个参数，参数可以不同顺序输出，可被使用多次，从第1开始数，不包括格式化字符串本身</li>\n</ul>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%2$d %2$#x; %1$d %1$#x\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//\"17 0x11; 16 0x10\"</span>\n</code></pre>\n<ul>\n<li>type</li>\n</ul>\n<pre><code>%d/i：4byte,解释为数值\n%u: 4byte,无符号，解释为数值\n%s: 4byte,解释为字符串指针，有解引用的效果\n%x/X: 4byte,解释为数值，打印16进制\n%c: 1byte,解释为值\n%p: 4byte，解释为数值\n%n: 不输出字符，把成功输出的字符个数（这个百分号之前的字符个数），将对应的参数解释为整型指针，并写入所指内存\n</code></pre>\n<ul>\n<li>length</li>\n</ul>\n<pre><code>hh: 1byte\nh: 2byte\nl: 4byte\nll: 8byte\n</code></pre>\n<h3 id=\"格式字符串用法\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#格式字符串用法\"></a>格式字符串用法</h3>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//fmt_str_1.c</span>\n<span class=\"token comment\">// gcc -m32 -g fmt_str_1.c -o fmt_str_1_32</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;stdlib.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format <span class=\"token operator\">=</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>arg1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%03d.%03d.%03d.%03d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"127.000.000.001\"</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1.23</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#010x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3735928559</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 0xdeadbeef</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s%n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"01234\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// n =5 </span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// n = 5</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"调用printf时栈结构\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#调用printf时栈结构\"></a>调用printf时栈结构</h4>\n<pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token number\">0x56592222</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">53</span><span class=\"token operator\">></span>    lea    eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ebx <span class=\"token operator\">-</span> <span class=\"token number\">0x1fc9</span><span class=\"token punctuation\">]</span>\n   <span class=\"token number\">0x56592228</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">59</span><span class=\"token operator\">></span>    mov    dword ptr <span class=\"token punctuation\">[</span>ebp <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eax\n   <span class=\"token number\">0x5659222b</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">62</span><span class=\"token operator\">></span>    sub    esp<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span>\n   <span class=\"token number\">0x5659222e</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">65</span><span class=\"token operator\">></span>    push   dword ptr <span class=\"token punctuation\">[</span>ebp <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span>\n   <span class=\"token number\">0x56592231</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">68</span><span class=\"token operator\">></span>    push   dword ptr <span class=\"token punctuation\">[</span>ebp <span class=\"token operator\">-</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">]</span>\n _ <span class=\"token number\">0x56592234</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">71</span><span class=\"token operator\">></span>    call   printf@plt                    <span class=\"token operator\">&#x3C;</span>printf@plt<span class=\"token operator\">></span>\n        format<span class=\"token operator\">:</span> <span class=\"token number\">0x56593008</span> __ <span class=\"token number\">0x48007325</span> <span class=\"token comment\">/* '%s' */</span>\n        vararg<span class=\"token operator\">:</span> <span class=\"token number\">0x5659300b</span> __ <span class=\"token char\">'Hello World!\\n'</span>\n \n   <span class=\"token number\">0x56592239</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">76</span><span class=\"token operator\">></span>    add    esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span>\n   <span class=\"token number\">0x5659223c</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">79</span><span class=\"token operator\">></span>    sub    esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0xc</span>\n   <span class=\"token number\">0x5659223f</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">82</span><span class=\"token operator\">></span>    push   <span class=\"token number\">1</span>\n   <span class=\"token number\">0x56592241</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">84</span><span class=\"token operator\">></span>    push   <span class=\"token number\">0</span>\n   <span class=\"token number\">0x56592243</span> <span class=\"token operator\">&#x3C;</span>main<span class=\"token operator\">+</span><span class=\"token number\">86</span><span class=\"token operator\">></span>    push   <span class=\"token number\">0</span>\n</code></pre>\n<pre class=\"language-c\"><code class=\"language-c\">──────────────────────────────────────────────────────────<span class=\"token punctuation\">[</span> STACK <span class=\"token punctuation\">]</span>──────────────────────────────────────────────────────────\n<span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">0000</span>│ esp <span class=\"token number\">0xffce6b50</span> —▸ <span class=\"token number\">0xffce6b84</span> ◂— <span class=\"token char\">'%08x.%08x.%08x.%08x.%08x'</span>\n<span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">0004</span>│     <span class=\"token number\">0xffce6b54</span> ◂— <span class=\"token number\">0x1</span>\n<span class=\"token number\">02</span><span class=\"token operator\">:</span><span class=\"token number\">0008</span>│     <span class=\"token number\">0xffce6b58</span> ◂— <span class=\"token number\">0x88888888</span>\n<span class=\"token number\">03</span><span class=\"token operator\">:</span><span class=\"token number\">000</span>c│     <span class=\"token number\">0xffce6b5c</span> ◂— <span class=\"token number\">0xffffffff</span>\n<span class=\"token number\">04</span><span class=\"token operator\">:</span><span class=\"token number\">0010</span>│     <span class=\"token number\">0xffce6b60</span> —▸ <span class=\"token number\">0xffce6b7a</span> ◂— <span class=\"token char\">'ABCD'</span>\n<span class=\"token number\">05</span><span class=\"token operator\">:</span><span class=\"token number\">0014</span>│     <span class=\"token number\">0xffce6b64</span> —▸ <span class=\"token number\">0xffce6b84</span> ◂— <span class=\"token char\">'%08x.%08x.%08x.%08x.%08x'</span>\n<span class=\"token number\">06</span><span class=\"token operator\">:</span><span class=\"token number\">0018</span>│     <span class=\"token number\">0xffce6b68</span> —▸ <span class=\"token number\">0xf7f92b50</span> —▸ <span class=\"token number\">0xf7f92af0</span> —▸ <span class=\"token number\">0xf7f5e3e0</span> —▸ <span class=\"token number\">0xf7f92990</span> ◂— <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">07</span><span class=\"token operator\">:</span><span class=\"token number\">001</span>c│     <span class=\"token number\">0xffce6b6c</span> —▸ <span class=\"token number\">0x80491f4</span> <span class=\"token punctuation\">(</span>main<span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> ◂— add    ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x2e0c</span>\n────────────────────────────────────────────────────────<span class=\"token punctuation\">[</span> BACKTRACE <span class=\"token punctuation\">]</span>────────────────────────────────────────────────────────\n ► f <span class=\"token number\">0</span> <span class=\"token number\">0x804925f</span> main<span class=\"token operator\">+</span><span class=\"token number\">137</span>\n   f <span class=\"token number\">1</span> <span class=\"token number\">0xf7d82ed5</span> __libc_start_main<span class=\"token operator\">+</span><span class=\"token number\">245</span>\n\n</code></pre>\n<h3 id=\"漏洞原理\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#漏洞原理\"></a>漏洞原理</h3>\n<blockquote>\n<p>如果格式化字符串可控，怎么样的可控，可以导致什么效果，都必须清楚，效果可以分为几类：出错（奔溃），副作用（写内存，读内存），绕过某种判断，不按预期输出结果（导致其他用这个输出结果的地方存在问题\n如果输入参数可控，配合相应的格式化字符串对参数的解释，可导致任意内存读写</p>\n</blockquote>\n<ul>\n<li>格式字符串要求的参数和实际提供的参数不匹配，格式化字符串%的个数对应参数的个数，对于32位程序会取栈中的值作为参数，对于64位程序，取决于第几个参数</li>\n<li>已经push的参数类型（如果是数值类型，则直接将值复制到栈中，如果是字符串，则将地址复制到栈中）和不匹配的格式化字符格式，如果printf函数的参数可控</li>\n<li>格式化字符串提供了读，写原语</li>\n<li>读地址是否可控，读内容是否可控，是否可打印</li>\n<li>写地址是否可控，写内容是否可控</li>\n</ul>\n<h3 id=\"如何利用\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#如何利用\"></a>如何利用</h3>\n<h4 id=\"读原语\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#读原语\"></a>读原语</h4>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//fmt_str_2.c</span>\n<span class=\"token comment\">//echo 0 > /proc/sys/kernel/randomize_va_space</span>\n<span class=\"token comment\">// gcc -m32 -g fmt_str_2.c -fno-stack-protector -no-pie -o fmt_str_2_32</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> format<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">0x88888888</span><span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> arg4<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3<span class=\"token punctuation\">,</span> arg4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>使用%s有解引用的效果，可以打印*p，如果p可控，则可以造成任意地址读，因此需要对输入参数可控，参数在栈中</li>\n<li>参数是第几位</li>\n</ul>\n<h4 id=\"写原语\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#写原语\"></a>写原语</h4>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//fmt_str_2.c</span>\n<span class=\"token comment\">//echo 0 > /proc/sys/kernel/randomize_va_space</span>\n<span class=\"token comment\">// gcc -m32 -g fmt_str_2.c -fno-stack-protector -no-pie -o fmt_str_2_32</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> format<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">0x88888888</span><span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> arg4<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3<span class=\"token punctuation\">,</span> arg4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"64位利用\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#64位利用\"></a>64位利用</h4>\n<h3 id=\"如何挖掘漏洞\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#如何挖掘漏洞\"></a>如何挖掘漏洞</h3>\n<h4 id=\"代码审计\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#代码审计\"></a>代码审计</h4>\n<ul>\n<li>对格式化输出函数敏感，梳理格式化字符串是否可控</li>\n</ul>\n<h4 id=\"fuzz\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fuzz\"></a>fuzz</h4>\n<h2 id=\"参考\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#参考\"></a>参考</h2>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2\">wiki</a></p>\n<p><a href=\"https://firmianay.gitbook.io/ctf-all-in-one/3_topics/pwn/3.1.1_format_string\">ctf-all-in-one</a></p>\n<p><a href=\"https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/\">ctf-wiki</a></p>","noteIndex":{"id":"ua6fcc7oj4utcqkv8dhmcb8","title":"b1babo's note","desc":"","updated":1669076632533,"created":1668950311250,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"dendron-note"},"contentHash":"15dbb1bbcda17b2620bd900a3c14c525","links":[],"anchors":{},"children":["z6zdce798dlnm1qvlbj0147","u92paxy6iqch8vik9v6f4gm"],"parent":null,"data":{},"body":"\nwrite and record something.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"dendron-note"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":true,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableMermaid":true},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://b1babo.github.io","enableBackLinks":true,"assetsPrefix":"/notes","enableHierarchyDisplay":true,"enableMermaid":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}